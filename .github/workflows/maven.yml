# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI Workflow

on:
  push:
    branches:
      - master  # Trigger on push to the master branch

jobs:
  build:
    runs-on: self-hosted # self-hosted runner installed in VM

    steps:
      # Step 1: Checkout the code from GitHub
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK (OpenJDK 17 in this case)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'  # Changed to JDK 17
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies to speed up builds
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Run Maven build and tests
      - name: Build with Maven
        run: mvn clean install -DskipTests  # You can add -DskipTests if you don't want to run tests

      # Step 5: Upload the WAR file as an artifact
      - name: Upload WAR file
        uses: actions/upload-artifact@v4
        with:
          name: war-file
          path: target/*.war  # Assuming the WAR file is located in the target directory
